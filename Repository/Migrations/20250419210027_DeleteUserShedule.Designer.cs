// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Repository;

#nullable disable

namespace Repository.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20250419210027_DeleteUserShedule")]
    partial class DeleteUserShedule
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Database.Answer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AnswerText")
                        .HasColumnType("text");

                    b.Property<bool>("IsCorrectAnswer")
                        .HasColumnType("boolean");

                    b.Property<List<string>>("PathToImage")
                        .HasColumnType("text[]");

                    b.Property<long>("QuestId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("QuestId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("Database.CategoryTasks", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CategoryTasks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Обычный вопрос"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Вопрос с множеством ответов"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Вопрос с ответом пользователя"
                        });
                });

            modelBuilder.Entity("Database.Direction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Directions");
                });

            modelBuilder.Entity("Database.Discipline", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Disciplines");
                });

            modelBuilder.Entity("Database.Group", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("Cours")
                        .HasColumnType("integer");

                    b.Property<int>("DirectionId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("EndOfTraining")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDateOfTraining")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DirectionId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Database.Quest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("CategoryTasksId")
                        .HasColumnType("integer");

                    b.Property<string>("Info")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<List<string>>("PathToImage")
                        .HasColumnType("text[]");

                    b.HasKey("Id");

                    b.HasIndex("CategoryTasksId");

                    b.ToTable("Quests");
                });

            modelBuilder.Entity("Database.ResultTest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("TestId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TestId");

                    b.HasIndex("UserId");

                    b.ToTable("Results");
                });

            modelBuilder.Entity("Database.Role", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<short>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            Name = "admin"
                        },
                        new
                        {
                            Id = (short)2,
                            Name = "teacher"
                        },
                        new
                        {
                            Id = (short)3,
                            Name = "student"
                        });
                });

            modelBuilder.Entity("Database.Schedule", b =>
                {
                    b.Property<int>("Cours")
                        .HasColumnType("integer");

                    b.Property<int>("DirectionId")
                        .HasColumnType("integer");

                    b.HasKey("Cours", "DirectionId");

                    b.HasIndex("DirectionId");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("Database.Test", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("DisciplineId")
                        .HasColumnType("integer");

                    b.Property<string>("Evaluations")
                        .HasColumnType("text");

                    b.Property<string>("InfoTest")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsCheck")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("NumberOfAttempts")
                        .HasColumnType("bigint");

                    b.Property<long?>("TimeInMinutes")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DisciplineId");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("Database.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("GroupId")
                        .HasColumnType("bigint");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short>("RoleId")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            FullName = "admin",
                            Password = "9A15B2F417C1F2409FBB424BE8D39AAA",
                            RoleId = (short)1
                        },
                        new
                        {
                            Id = 2L,
                            FullName = "teacher",
                            Password = "9A15B2F417C1F2409FBB424BE8D39AAA",
                            RoleId = (short)2
                        },
                        new
                        {
                            Id = 3L,
                            FullName = "student",
                            Password = "9A15B2F417C1F2409FBB424BE8D39AAA",
                            RoleId = (short)3
                        });
                });

            modelBuilder.Entity("Database.UserResponses", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("EvaluationName")
                        .HasColumnType("text");

                    b.Property<bool>("IsFinish")
                        .HasColumnType("boolean");

                    b.Property<string>("ListUserResponses")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal?>("Result")
                        .HasColumnType("numeric");

                    b.Property<long>("ResultTestId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartdateTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ResultTestId");

                    b.ToTable("UserResponses");
                });

            modelBuilder.Entity("DisciplineSchedule", b =>
                {
                    b.Property<int>("DisciplinesId")
                        .HasColumnType("integer");

                    b.Property<int>("SchedulesCours")
                        .HasColumnType("integer");

                    b.Property<int>("SchedulesDirectionId")
                        .HasColumnType("integer");

                    b.HasKey("DisciplinesId", "SchedulesCours", "SchedulesDirectionId");

                    b.HasIndex("SchedulesCours", "SchedulesDirectionId");

                    b.ToTable("DisciplineSchedule");
                });

            modelBuilder.Entity("DisciplineUser", b =>
                {
                    b.Property<int>("DisciplinesId")
                        .HasColumnType("integer");

                    b.Property<long>("UsersId")
                        .HasColumnType("bigint");

                    b.HasKey("DisciplinesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("DisciplineUser");
                });

            modelBuilder.Entity("QuestTest", b =>
                {
                    b.Property<long>("QuestsId")
                        .HasColumnType("bigint");

                    b.Property<long>("TestsId")
                        .HasColumnType("bigint");

                    b.HasKey("QuestsId", "TestsId");

                    b.HasIndex("TestsId");

                    b.ToTable("QuestTest");
                });

            modelBuilder.Entity("Database.Answer", b =>
                {
                    b.HasOne("Database.Quest", "Quest")
                        .WithMany("Answers")
                        .HasForeignKey("QuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quest");
                });

            modelBuilder.Entity("Database.Group", b =>
                {
                    b.HasOne("Database.Direction", "Direction")
                        .WithMany("Groups")
                        .HasForeignKey("DirectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Direction");
                });

            modelBuilder.Entity("Database.Quest", b =>
                {
                    b.HasOne("Database.CategoryTasks", "CategoryTasks")
                        .WithMany()
                        .HasForeignKey("CategoryTasksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CategoryTasks");
                });

            modelBuilder.Entity("Database.ResultTest", b =>
                {
                    b.HasOne("Database.Test", "Test")
                        .WithMany()
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Test");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Database.Schedule", b =>
                {
                    b.HasOne("Database.Direction", "Direction")
                        .WithMany("Schedule")
                        .HasForeignKey("DirectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Direction");
                });

            modelBuilder.Entity("Database.Test", b =>
                {
                    b.HasOne("Database.Discipline", "Discipline")
                        .WithMany("Tests")
                        .HasForeignKey("DisciplineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Discipline");
                });

            modelBuilder.Entity("Database.User", b =>
                {
                    b.HasOne("Database.Group", "Group")
                        .WithMany("Users")
                        .HasForeignKey("GroupId");

                    b.HasOne("Database.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Database.UserResponses", b =>
                {
                    b.HasOne("Database.ResultTest", "ResultTest")
                        .WithMany("Responses")
                        .HasForeignKey("ResultTestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ResultTest");
                });

            modelBuilder.Entity("DisciplineSchedule", b =>
                {
                    b.HasOne("Database.Discipline", null)
                        .WithMany()
                        .HasForeignKey("DisciplinesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Schedule", null)
                        .WithMany()
                        .HasForeignKey("SchedulesCours", "SchedulesDirectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DisciplineUser", b =>
                {
                    b.HasOne("Database.Discipline", null)
                        .WithMany()
                        .HasForeignKey("DisciplinesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QuestTest", b =>
                {
                    b.HasOne("Database.Quest", null)
                        .WithMany()
                        .HasForeignKey("QuestsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Test", null)
                        .WithMany()
                        .HasForeignKey("TestsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Database.Direction", b =>
                {
                    b.Navigation("Groups");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("Database.Discipline", b =>
                {
                    b.Navigation("Tests");
                });

            modelBuilder.Entity("Database.Group", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Database.Quest", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("Database.ResultTest", b =>
                {
                    b.Navigation("Responses");
                });
#pragma warning restore 612, 618
        }
    }
}
